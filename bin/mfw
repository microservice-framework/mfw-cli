#!/usr/bin/env node

'use strict';

const commander = require('commander');
const path = require('path');
const fs = require('fs-extra');
const pkg = require('../package.json');
const Message = require('../includes/message.js');
/*const MFWCli = require('../includes/MFWCliClass.js');
const status = require('../includes/MFWCliStatus.js');
const client = require('../includes/MFWClient.js');
*/
commander.version(pkg.version).usage('[cmd] [options] [mode]');

// Load core modules.
try {
  let plugins = fs.readdirSync(__dirname + '/../plugins/');
  for (let filename of plugins) {
    console.log(filename);
    require('../plugins/' + filename).commander(commander);
  }
} catch(e) {
  console.log(e);
  Message.error('Failed to read plugins directory: ' + e.message);
}

/*


commander.command('start <service>')
  .description('Start microservice(s). Use "all" to install all services saved in package.json.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-d, --devel', 'Optionally devel mode')
  .action(MFWCli.startService);

commander.command('stop <service>')
  .description('Stop microservice(s). Use "all" to install all services saved in package.json.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .action(MFWCli.stopService);

commander.command('status [service]')
  .description('Microservice(s) status')
  .option('-r, --root <dir>', 'Optionally root directory')
  .action(status.Status);

commander.command('client-create <service> <JSONDATA>')
  .description('Create resource in service.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-t, --token <token>', 'Optionally token. If no token provided, SECURE_KEY used.')
  .option('-a, --accesstoken <accesstoken>',
    'Optionally access token. If no token is provided, then SECURE_KEY is used instead.')
  .action(client.clientPOST);

commander.command('client-read <service> <id>')
  .description('Read resource by ID from service.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-t, --token <token>', 'Optionally token.')
  .option('-a, --accesstoken <accesstoken>', 'Optionally access token.')
  .action(client.clientGet);

commander.command('client-update <service> <id> <JSONDATA>')
  .description('Update resource by ID for service.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-t, --token <token>', 'Optionally token. If no token is provided, then SECURE_KEY used.')
  .option('-a, --accesstoken <accesstoken>',
    'Optionally access token. If no token is provided, then SECURE_KEY is used instead.')
  .action(client.clientPUT);

commander.command('client-delete <service> <id>')
  .description('Delete resource by ID from service.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-t, --token <token>', 'Optionally token.')
  .option('-a, --accesstoken <accesstoken>', 'Optionaly access token.')
  .action(client.clientDEL);

commander.command('client-search <service> <JSONDATA>')
  .description('Search resource in service.')
  .option('-r, --root <dir>', 'Optionally root directory')
  .option('-t, --token <token>',
    'Optionally token. If no is token provided, then SECURE_KEY is used instead.')
  .option('-a, --accesstoken <accesstoken>',
    'Optionally access token. If no token is provided, then SECURE_KEY is used instead.')
  .action(client.clientSEARCH);


MFWCli.commands(commander);*/

commander.parse(process.argv);

if (process.argv.length == 2) {
  commander.outputHelp();
}
