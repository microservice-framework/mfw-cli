#!/usr/bin/env node

'use strict';

const commander = require('commander');
const path = require('path');
const fs = require('fs');
const pkg = require('../package.json');
const Message = require('../includes/message.js');
const MFWCli = require('../includes/MFWCliClass.js');
const exec = require('child_process').exec;

commander.version(pkg.version).usage('[cmd] [module]');

commander.option('-r, --root <dir>', 'Optionaly root directory')
commander.option('-s, --save', 'Save microservice information')

commander.command('setup [dir]')
  .description('setup directory')
  .action(setupDir);

commander.command('install <module>')
  .description('Install microservice')
  .action(installService);

commander.command('update <module>')
  .description('Update microservice')
  .action(updateService);

commander.command('uninstall <module>')
  .description('Uninstall microservice')
  .action(uninstallService);


commander.parse(process.argv);

if (process.argv.length == 2) {
  commander.outputHelp();
}

function setupDir(dir) {
  if (!dir) {
    dir = process.cwd();
  }
  var resolve = path.resolve(dir);

  MFWCli.setup(resolve);
}

function installService(service) {
  var rootDIR = commander.root;
  if (!rootDIR) {
    rootDIR = process.cwd();
  }
  var resolve = path.resolve(rootDIR);
  MFWCli.install(resolve, service, commander.save);
}

function updateService(service) {
  var rootDIR = commander.root;
  if (!rootDIR) {
    rootDIR = process.cwd();
  }
  var resolve = path.resolve(rootDIR);

  MFWCli.update(resolve, service);
}

function uninstallService(service) {
  var rootDIR = commander.root;
  if (!rootDIR) {
    rootDIR = process.cwd();
  }
  var resolve = path.resolve(rootDIR);

  MFWCli.uninstall(resolve, service, commander.save);
}

